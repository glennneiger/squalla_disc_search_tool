{"ast":null,"code":"import axios from \"axios\";\nimport { SET_CURRENT_USER } from \"./types\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\"; // Login - Get User Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post(\"/api/users/login\", userData).then(function (res) {\n      // Save to local storage\n      var token = res.data.token; // Set token to local storage\n\n      localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/mmangus/Desktop/discs-courses-DB/client/src/redux/actions/authActions.js"],"names":["axios","SET_CURRENT_USER","setAuthToken","jwt_decode","loginUser","userData","dispatch","post","then","res","token","data","localStorage","setItem","decoded","setCurrentUser","type","payload","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC/CN,IAAAA,KAAK,CAACO,IAAN,CAAW,kBAAX,EAA+BF,QAA/B,EAAyCG,IAAzC,CAA8C,UAAAC,GAAG,EAAI;AACnD;AADmD,UAE3CC,KAF2C,GAEjCD,GAAG,CAACE,IAF6B,CAE3CD,KAF2C,EAGnD;;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EAJmD,CAKnD;;AACAR,MAAAA,YAAY,CAACQ,KAAD,CAAZ,CANmD,CAOnD;;AACA,UAAMI,OAAO,GAAGX,UAAU,CAACO,KAAD,CAA1B,CARmD,CASnD;;AACAJ,MAAAA,QAAQ,CAACS,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAXD;AAYD,GAbgC;AAAA,CAA1B,C,CAeP;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLE,IAAAA,IAAI,EAAEf,gBADD;AAELgB,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAZ,QAAQ,EAAI;AAC1C;AACAM,IAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAjB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAI,IAAAA,QAAQ,CAACS,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import axios from \"axios\";\nimport { SET_CURRENT_USER } from \"./types\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\n// Login - Get User Token\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to local storage\n    const { token } = res.data;\n    // Set token to local storage\n    localStorage.setItem(\"jwtToken\", token);\n    // Set token to Auth header\n    setAuthToken(token);\n    // Decode token to get user data\n    const decoded = jwt_decode(token);\n    // Set current user\n    dispatch(setCurrentUser(decoded));\n  });\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}